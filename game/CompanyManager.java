/* $Header: /Users/blentz/rails_rcs/cvs/18xx/game/Attic/CompanyManager.java,v 1.5 2005/04/18 03:30:19 wakko666 Exp $ *  * Created on 05-Mar-2005 IG Adams * Changes: * 19mar2005 Erik Vos: added CompanyType and split public/private companies. */package game;import java.util.*;import org.w3c.dom.*;import util.XmlUtils;/** * @author iadams *  * First inmplementation of CompanyManager. */public class CompanyManager implements CompanyManagerI, ConfigurableComponentI{   /** A map with all company types, by type name */   private Map mCompanyTypes = new HashMap();   /** A List with all companies */   private List lCompanies = new ArrayList();   /** A List with all private companies */   private List lPrivateCompanies = new ArrayList();   /** A List with all public companies */   private List lPublicCompanies = new ArrayList();   /** A map with all private companies by name */   private Map mPrivateCompanies = new HashMap();   /** A map with all public (i.e. non-private) companies by name */   private Map mPublicCompanies = new HashMap();   /** A map of all type names to lists of companies of that type */   private Map mCompaniesByType = new HashMap();   /*    * NOTES: 1. we don't have a map over all companies, because some games have    * duplicate names, e.g. B&O in 1830. 2. we have both a map and a list of    * private/public companies to preserve configuration sequence while allowing    * direct access.    */   /**    * No-args constructor.    */   public CompanyManager()   {      //Nothing to do here, everything happens when configured.   }   /**    * @see game.ConfigurableComponentI#configureFromXML(org.w3c.dom.Element)    */   public void configureFromXML(Element el) throws ConfigurationException   {      /* Read and configure the company types */      NodeList types = el.getElementsByTagName(CompanyType.ELEMENT_ID);      /* Bug may still be here ---> recursively calls new Game()       * Depends on Game() constructor being empty */      Game game = Game.getInstance();      Bank bank = game.getBank();      Portfolio ipo = bank.getIpo();      for (int i = 0; i < types.getLength(); i++)      {         Element compElement = (Element) types.item(i);         NamedNodeMap nnp = compElement.getAttributes();         //Extract the attributes of the Component         String name = XmlUtils.extractStringAttribute(nnp,               CompanyType.NAME_TAG);         if (name == null)         {            throw new ConfigurationException("Unnamed company type found.");         }         String className = XmlUtils.extractStringAttribute(nnp,               CompanyType.CLASS_TAG);         if (className == null)         {            throw new ConfigurationException("Company type " + name                  + " has no class defined.");         }         if (mCompanyTypes.get(name) != null)         {            throw new ConfigurationException("Company type " + name                  + " configured twice");         }         CompanyType type = new CompanyType(name, className, el);         mCompanyTypes.put(name, type);         // Get any default certificate array for public companies         NodeList typeElements = compElement               .getElementsByTagName("Certificate");         if (typeElements.getLength() > 0)         {            int shareTotal = 0;            boolean gotPresident = false;            Certificate certificate;            for (int j = 0; j < typeElements.getLength(); j++)            {               Element certElement = (Element) typeElements.item(j);               NamedNodeMap nnp2 = certElement.getAttributes();                                         boolean president = "President".equals(XmlUtils.extractStringAttribute(nnp2, "type"));               int share = XmlUtils.extractIntegerAttribute(nnp2, "share");               int number = XmlUtils.extractIntegerAttribute(nnp2, "number");                              if (number == -1)                  number = 1;               if (president)               {                  if (number > 1 || gotPresident)                     throw new ConfigurationException("Company type " + name                           + " cannot have multiple President shares");                  gotPresident = true;               }               for (int k = 0; k < number; k++)               {                  certificate = new Certificate(share, president);                  type.addCertificate(certificate);                  shareTotal += share;               }            }            if (shareTotal != 100)               throw new ConfigurationException("Company type " + name                     + " total shares is not 100%");         }      }      /* Read and configure the companies */      NodeList children = el.getElementsByTagName(Company.COMPANY_ELEMENT_ID);      for (int i = 0; i < children.getLength(); i++)      {         Element compElement = (Element) children.item(i);         NamedNodeMap nnp = compElement.getAttributes();         //Extract the attributes of the Component         String name = XmlUtils.extractStringAttribute(nnp,               Company.COMPANY_NAME_TAG);         if (name == null)         {            throw new ConfigurationException("Unnamed company found.");         }         String type = XmlUtils.extractStringAttribute(nnp,               Company.COMPANY_TYPE_TAG);         if (type == null)         {            throw new ConfigurationException("Company " + name                  + " has no type defined.");         }         CompanyType cType = (CompanyType) mCompanyTypes.get(type);         if (cType == null)         {            throw new ConfigurationException("Company " + name                  + " has undefined type " + cType);         }         try         {            String className = cType.getClassName();            Company company = (Company) Class.forName(className).newInstance();            company.init(name, cType);            company.configureFromXML(compElement);            /* Add company to the various lists */            lCompanies.add(company);            /* Private or public */            if (company instanceof PrivateCompany)            {               mPrivateCompanies.put(name, company);               lPrivateCompanies.add(company);               bank.getIpo().addPrivate((PrivateCompany) company);               //System.out.println("Added private "+name+" to the IPO");            }            else if (company instanceof PublicCompany)            {               mPublicCompanies.put(name, company);               lPublicCompanies.add(company);               /*                * Add the certificates, if defined with the CompanyType and                * absent in the Company specification                */               if (((PublicCompany) company).getCertificates() == null)               {                  List defaultCerts = cType.getDefaultCertificates();                  if (defaultCerts == null)                  {                     throw new ConfigurationException("Company " + name                           + " has no certificates");                  }                  else                  {                     ((PublicCompany) company).setCertificates(defaultCerts);                  }               }               // Add the certificates to the IPO               List certificates = ((PublicCompany) company).getCertificates();               Iterator it = certificates.iterator();               while (it.hasNext())               {                  bank.getIpo().addCertificate((Certificate) it.next());               }            }            /* By type */            if (!mCompaniesByType.containsKey(type))               mCompaniesByType.put(type, new ArrayList());            ((List) mCompaniesByType.get(type)).add(company);         }         catch (Exception e)         {            throw new ConfigurationException("Class " + cType.getClassName()                  + " cannot be instantiated", e);         }      }   }   /**    * @see game.CompanyManagerI#getCompany(java.lang.String)    *      */   public PrivateCompany getPrivateCompany(String name)   {      return (PrivateCompany) mPrivateCompanies.get(name);   }   public PublicCompany getPublicCompany(String name)   {      return (PublicCompany) mPublicCompanies.get(name);   }   /**    * @see game.CompanyManagerI#getAllNames()    */   public List getAllPrivateNames()   {      return new ArrayList(mPrivateCompanies.keySet());   }   public List getAllPublicNames()   {      return new ArrayList(mPublicCompanies.keySet());   }   /**    * @see game.CompanyManagerI#getAllCompanies()    */   public List getAllCompanies()   {      return (List) lCompanies;   }   public List getAllPrivateCompanies()   {      return (List) lPrivateCompanies;   }   public List getAllPublicCompanies()   {      return (List) lPublicCompanies;   }   public List getCompaniesByType(String type)   {      return (List) mCompaniesByType.get(type);   }}