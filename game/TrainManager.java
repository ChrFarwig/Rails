/* * $Header: /Users/blentz/rails_rcs/cvs/18xx/game/Attic/TrainManager.java,v 1.4 2005/10/11 17:35:29 wakko666 Exp $ *  * Created on 17-08-2005 by Erik Vos Changes: */package game;import java.util.*;import org.w3c.dom.*;import util.XmlUtils;public class TrainManager implements TrainManagerI, ConfigurableComponentI{	protected List lTrainTypes = new ArrayList();	protected Map mTrainTypes = new HashMap();	private static TrainManagerI instance = null;	protected static Portfolio ipo = null;	protected static Portfolio unavailable = null;	protected int newTypeIndex;	protected TrainTypeI newTypeToBuy = null;	protected boolean trainsHaveRusted = false;	protected boolean trainAvailabilityChanged = false;	protected TrainTypeI cheapExchangeApplies = null;	/**	 * No-args constructor.	 */	public TrainManager()	{		instance = this;		ipo = Bank.getIpo();		unavailable = Bank.getUnavailable();		// Nothing to do here, everything happens when configured.	}	public static TrainManagerI get()	{		return instance;	}	/**	 * @see game.ConfigurableComponentI#configureFromXML(org.w3c.dom.Element)	 */	public void configureFromXML(Element el) throws ConfigurationException	{		TrainType defaultType = null;		TrainType newType;		Element defElement = (Element) el.getElementsByTagName("Default")				.item(0);		if (defElement != null)		{			defaultType = new TrainType(false);			defaultType.configureFromXML(defElement);		}		NodeList types = el.getElementsByTagName("Train");		for (int i = 0; i < types.getLength(); i++)		{			Element element = (Element) types.item(i);			if (defaultType != null)			{				newType = (TrainType) defaultType.clone();			}			else			{				newType = new TrainType(true);			}			lTrainTypes.add(newType);			newType.configureFromXML(element);			mTrainTypes.put(newType.getName(), newType);		}		// Finish initialisation of the train types		Iterator it = lTrainTypes.iterator();		TrainTypeI type;		while (it.hasNext())		{			type = (TrainTypeI) it.next();			if (type.getReleasedTrainTypeName() != null)			{				type.setReleasedTrainType((TrainTypeI) mTrainTypes.get(type.getReleasedTrainTypeName()));			}			if (type.getRustedTrainTypeName() != null)			{				type.setRustedTrainType((TrainTypeI) mTrainTypes.get(type.getRustedTrainTypeName()));			}		}		// By default, set the first train type to "available".		newTypeIndex = 0;		newTypeToBuy = (TrainTypeI) lTrainTypes.get(newTypeIndex);		newTypeToBuy.setAvailable(true);	}	/**	 * Make an abbreviated list of trains, like "2(6) 3(5)" etc, to show in the	 * IPO.	 * 	 * @param holder	 *            The Portfolio for which this list will be made (always IPO).	 */	public String makeAbbreviatedList(Portfolio holder)	{		StringBuffer b = new StringBuffer();		TrainTypeI type;		TrainI[] trains;		for (Iterator it = lTrainTypes.iterator(); it.hasNext();)		{			type = (TrainTypeI) it.next();			trains = holder.getTrainsPerType(type);			if (trains.length > 0)			{				if (b.length() > 0)					b.append(" ");				b.append(type.getName()).append("(");				if (type.hasInfiniteAmount())				{					b.append("+");				}				else				{					b.append(trains.length);				}				b.append(")");			}		}		return b.toString();	}	/**	 * Make a full list of trains, like "2 2 3 3", to show in any field	 * describing train possessions, except the IPO.	 * 	 * @param holder	 *            The Portfolio for which this list will be made.	 */	public String makeFullList(Portfolio holder)	{		TrainTypeI type;		TrainI[] trains = holder.getTrains();		if (trains == null || trains.length == 0)			return "";		return makeFullList(trains);	}	public String makeFullList(TrainI[] trains)	{		StringBuffer b = new StringBuffer();		for (int i = 0; i < trains.length; i++)		{			if (b.length() > 0)				b.append(" ");			b.append(trains[i].getType().getName());		}		return b.toString();	}	/**	 * This method handles any consequences of new train buying (from the IPO),	 * such as rusting and phase changes. It must be called <b>after</b> the	 * train has been transferred.	 * 	 */	public void checkTrainAvailability(TrainI train, Portfolio from)	{		trainsHaveRusted = false;		if (from != ipo)			return;		TrainTypeI boughtType, nextType;		boughtType = train.getType();		if (ipo.getTrainOfType(boughtType) == null)		{			// Last train bought, make a new type available.			nextType = ((TrainTypeI) lTrainTypes.get(++newTypeIndex));			if (nextType != null)			{				if (!nextType.isAvailable())					nextType.setAvailable(true);				newTypeToBuy = nextType;				trainAvailabilityChanged = true;				Log.write("All " + boughtType.getName()						+ "-trains are sold out, " + nextType.getName()						+ "-trains now available");				// Check if a cheap exchange is possible				if (newTypeToBuy.isFirstExchange())				{					cheapExchangeApplies = nextType;				}			}		}		if (boughtType == newTypeToBuy)		{			// First train of a new type bought			Log.write("First " + boughtType.getName() + "-train bought");			cheapExchangeApplies = null;			TrainTypeI rustedType = boughtType.getRustedTrainType();			// System.out.println("--- Rusted type is "+rustedType);			if (rustedType != null && !rustedType.getRusted())			{				rustedType.setRusted();				Log.write("All " + rustedType.getName()						+ "-trains are rusted and have been removed");				trainsHaveRusted = true;				trainAvailabilityChanged = true;			}			TrainTypeI releasedType = boughtType.getReleasedTrainType();			if (releasedType != null)			{				if (!releasedType.isAvailable())					releasedType.setAvailable(true);				Log.write(releasedType.getName() + "-trains now available");				trainAvailabilityChanged = true;			}			newTypeToBuy = null;		}	}	public List getAvailableNewTrains()	{		List availableTrains = new ArrayList();		TrainTypeI type;		TrainI train;		Iterator it = lTrainTypes.iterator();		while (it.hasNext())		{			type = (TrainTypeI) it.next();			if (type.isAvailable())			{				train = ipo.getTrainOfType(type);				if (train != null)				{					availableTrains.add(train);					if (cheapExchangeApplies == type)						train.setCanBeExchanged(true);				}			}		}		return availableTrains;	}	public TrainTypeI getTypeByName(String name)	{		return (TrainTypeI) mTrainTypes.get(name);	}	public boolean hasAvailabilityChanged()	{		return trainAvailabilityChanged;	}	public void resetAvailabilityChanged()	{		trainAvailabilityChanged = false;	}}